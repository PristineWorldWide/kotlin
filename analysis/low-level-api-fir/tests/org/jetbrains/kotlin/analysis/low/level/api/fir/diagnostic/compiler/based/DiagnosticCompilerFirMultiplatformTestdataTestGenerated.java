/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.low.level.api.fir.diagnostic.compiler.based;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve")
@TestDataPath("$PROJECT_ROOT")
public class DiagnosticCompilerFirMultiplatformTestdataTestGenerated extends AbstractDiagnosticMultiplatformCompilerTestDataTest {
    @Test
    public void testAllFilesPresentInWithLazyResolve() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect")
    @TestDataPath("$PROJECT_ROOT")
    public class ActualAnnotationsNotMatchExpect {
        @Test
        @TestMetadata("actualInnerClassMissingMember.kt")
        public void testActualInnerClassMissingMember() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/actualInnerClassMissingMember.kt");
        }

        @Test
        public void testAllFilesPresentInActualAnnotationsNotMatchExpect() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect"), Pattern.compile("^(.+)\\.kt$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
        }

        @Test
        @TestMetadata("annotationArgRendering.kt")
        public void testAnnotationArgRendering() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationArgRendering.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsConstExpressions.kt")
        public void testAnnotationArgumentsConstExpressions() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationArgumentsConstExpressions.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsDefaults.kt")
        public void testAnnotationArgumentsDefaults() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationArgumentsDefaults.kt");
        }

        @Test
        @TestMetadata("annotationArgumentsLazyResolve.kt")
        public void testAnnotationArgumentsLazyResolve() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationArgumentsLazyResolve.kt");
        }

        @Test
        @TestMetadata("annotationMatching_oldLanguageVersion.kt")
        public void testAnnotationMatching_oldLanguageVersion() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationMatching_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("annotationTarget.kt")
        public void testAnnotationTarget() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationTarget.kt");
        }

        @Test
        @TestMetadata("annotationTypeParameters.kt")
        public void testAnnotationTypeParameters() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/annotationTypeParameters.kt");
        }

        @Test
        @TestMetadata("basicOnDeclaration.kt")
        public void testBasicOnDeclaration() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/basicOnDeclaration.kt");
        }

        @Test
        @TestMetadata("checkDiagnosticFullText.kt")
        public void testCheckDiagnosticFullText() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/checkDiagnosticFullText.kt");
        }

        @Test
        @TestMetadata("classScopeInnerClasses.kt")
        public void testClassScopeInnerClasses() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/classScopeInnerClasses.kt");
        }

        @Test
        @TestMetadata("classScopeViaTypealiasIncompatible.kt")
        public void testClassScopeViaTypealiasIncompatible() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/classScopeViaTypealiasIncompatible.kt");
        }

        @Test
        @TestMetadata("compatibleOverrides.kt")
        public void testCompatibleOverrides() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/compatibleOverrides.kt");
        }

        @Test
        @TestMetadata("defaultValueParametersRendering.kt")
        public void testDefaultValueParametersRendering() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/defaultValueParametersRendering.kt");
        }

        @Test
        @TestMetadata("deprecatedAnnotationOnlyOnActual_useInPlatform.kt")
        public void testDeprecatedAnnotationOnlyOnActual_useInPlatform() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/deprecatedAnnotationOnlyOnActual_useInPlatform.kt");
        }

        @Test
        @TestMetadata("differentOrder.kt")
        public void testDifferentOrder() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/differentOrder.kt");
        }

        @Test
        @TestMetadata("enumEntries.kt")
        public void testEnumEntries() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/enumEntries.kt");
        }

        @Test
        @TestMetadata("fakeOverrides.kt")
        public void testFakeOverrides() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/fakeOverrides.kt");
        }

        @Test
        @TestMetadata("floatNumbersComparison.kt")
        public void testFloatNumbersComparison() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/floatNumbersComparison.kt");
        }

        @Test
        @TestMetadata("gettersAndSetters.kt")
        public void testGettersAndSetters() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/gettersAndSetters.kt");
        }

        @Test
        @TestMetadata("intrinsicConstEvaluation.kt")
        public void testIntrinsicConstEvaluation() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/intrinsicConstEvaluation.kt");
        }

        @Test
        @TestMetadata("kclassArgWithExpectClass.kt")
        public void testKclassArgWithExpectClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/kclassArgWithExpectClass.kt");
        }

        @Test
        @TestMetadata("kotlinAnaloguesForJavaAnnotations.kt")
        public void testKotlinAnaloguesForJavaAnnotations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/kotlinAnaloguesForJavaAnnotations.kt");
        }

        @Test
        @TestMetadata("repeatableNoArg.kt")
        public void testRepeatableNoArg() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/repeatableNoArg.kt");
        }

        @Test
        @TestMetadata("repeatableWithArg.kt")
        public void testRepeatableWithArg() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/repeatableWithArg.kt");
        }

        @Test
        @TestMetadata("skippedAnnotations.kt")
        public void testSkippedAnnotations() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/skippedAnnotations.kt");
        }

        @Test
        @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
        public void testSourceRetentionAnnotationsWhenTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/sourceRetentionAnnotationsWhenTypealias.kt");
        }

        @Test
        @TestMetadata("substitutionOverrideInTwoClasses.kt")
        public void testSubstitutionOverrideInTwoClasses() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/substitutionOverrideInTwoClasses.kt");
        }

        @Test
        @TestMetadata("twoActualTypealiasesToSameClass.kt")
        public void testTwoActualTypealiasesToSameClass() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/twoActualTypealiasesToSameClass.kt");
        }

        @Test
        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typeParameters.kt");
        }

        @Test
        @TestMetadata("typeUsage.kt")
        public void testTypeUsage() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typeUsage.kt");
        }

        @Test
        @TestMetadata("typeUsageTypealiasInSuper.kt")
        public void testTypeUsageTypealiasInSuper() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typeUsageTypealiasInSuper.kt");
        }

        @Test
        @TestMetadata("typeUsageWithImplicitType.kt")
        public void testTypeUsageWithImplicitType() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typeUsageWithImplicitType.kt");
        }

        @Test
        @TestMetadata("typeUsageWithUnresolvedReference.kt")
        public void testTypeUsageWithUnresolvedReference() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typeUsageWithUnresolvedReference.kt");
        }

        @Test
        @TestMetadata("typealias.kt")
        public void testTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typealias.kt");
        }

        @Test
        @TestMetadata("typealiasToJavaLibrary.kt")
        public void testTypealiasToJavaLibrary() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typealiasToJavaLibrary.kt");
        }

        @Test
        @TestMetadata("typealiasToKtLibrary.kt")
        public void testTypealiasToKtLibrary() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/typealiasToKtLibrary.kt");
        }

        @Test
        @TestMetadata("unresolvedReference.kt")
        public void testUnresolvedReference() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/unresolvedReference.kt");
        }

        @Test
        @TestMetadata("valueParameters.kt")
        public void testValueParameters() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/valueParameters.kt");
        }

        @Test
        @TestMetadata("withAnnotationActualTypealias.kt")
        public void testWithAnnotationActualTypealias() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/withAnnotationActualTypealias.kt");
        }

        @Test
        @TestMetadata("withOtherIncomatibilities.kt")
        public void testWithOtherIncomatibilities() throws Exception {
            runTest("compiler/testData/diagnostics/tests/multiplatform/withLazyResolve/actualAnnotationsNotMatchExpect/withOtherIncomatibilities.kt");
        }
    }
}

@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>>
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]

@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]

@R|Anno|(LAZY_EXPRESSION)  kotlin/Int
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]

@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/Collection<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/String>>
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]

@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/String>
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]

@R|Anno|(LAZY_EXPRESSION)  kotlin/String
  context -> FirNamedFunctionSymbol /Derived.explicitType
  anchor -> [FirNamedFunctionSymbol /OriginalInterface.explicitType]


TARGET: @R|Anno|[Types](LAZY_EXPRESSION) public open [ResolvedTo(STATUS)] [DelegatedWrapperDataKey=[wrapped=FirNamedFunctionSymbol /OriginalInterface.explicitType, containingClass=Derived, delegateField=FirFieldSymbol /Derived.$$delegate_0] fun R|@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/Collection<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/String>>|.explicitType(): R|@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>>|
FILE: [ResolvedTo(IMPORTS)] delegateWithExplicitType.kt
    @R|kotlin/annotation/Target|[CompilerRequiredAnnotations](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.FUNCTION|) public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=/Anno.position] position: String): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val prop: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final [ResolvedTo(STATUS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|OriginalInterface| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor([ResolvedTo(STATUS)] i: R|OriginalInterface|): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final [ResolvedTo(STATUS)] field $$delegate_0: R|OriginalInterface| = LAZY_EXPRESSION

    }
    public abstract [ResolvedTo(STATUS)] interface OriginalInterface : R|kotlin/Any| {
        @R|Anno|[Types](LAZY_EXPRESSION) public open [ResolvedTo(STATUS)] fun R|@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/Collection<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/String>>|.explicitType(): R|@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/collections/List<@R|Anno|(LAZY_EXPRESSION)  kotlin/Int>>| { LAZY_BLOCK }

    }

@R|lowlevel/Anno|(position = R|lowlevel/prop|)  kotlin/collections/List<@R|lowlevel/Anno|(position = R|lowlevel/prop|)  ERROR CLASS: Symbol not found for Type>
  context -> FirNamedFunctionSymbol lowlevel/function
  anchor -> [FirNamedFunctionSymbol lowlevel/function]

@R|lowlevel/Anno|(position = R|lowlevel/prop|)  ERROR CLASS: Symbol not found for Type
  context -> FirNamedFunctionSymbol lowlevel/function
  anchor -> []

FILE: [ResolvedTo(IMPORTS)] nestedErrorReturnType.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=lowlevel/Anno.position] position: R|kotlin/String|): R|lowlevel/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val prop: R|kotlin/String| = String(str)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/String|
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun function(): R|@R|lowlevel/Anno|(position = R|lowlevel/prop|)  kotlin/collections/List<@R|lowlevel/Anno|(position = R|lowlevel/prop|)  ERROR CLASS: Symbol not found for Type>| {
    }
